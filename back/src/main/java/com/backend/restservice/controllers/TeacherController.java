package com.backend.restservice.controllers;
import com.backend.restservice.models.*;
import com.backend.restservice.repositories.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import java.util.Optional;


@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class TeacherController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private StateRepository stateRepository;
    @Autowired
    private UniversityRepository universityRepository;
    @Autowired
    private CampusRepository campusRepository;
    @Autowired
    private RosterRepository rosterRepository;

    @Autowired
    JdbcTemplate database;

    @GetMapping(path="/state")
    public @ResponseBody Iterable<State> getAllStates() {
        // This returns a JSON or XML with the users
        int rowCount = this.database.
            queryForObject("select count(*) from state", Integer.class);
        System.out.println("\n*****count states:" + rowCount);
        return stateRepository.findAll();
    }

    @GetMapping(path="/university")
    public @ResponseBody Iterable<University> getAllUnis() {
        // This returns a JSON or XML with the users
        int rowCount = this.database.
                queryForObject("select count(*) from university", Integer.class);
        System.out.println("\n*****count unis:" + rowCount);
        return universityRepository.findAll();
    }

    @GetMapping(path="/campus")
    public @ResponseBody Iterable<Campus> getAllCampus() {
        // This returns a JSON or XML with the users
        int rowCount = this.database.
            queryForObject("select count(*) from campus", Integer.class);
        System.out.println("\n*****count compus:" + rowCount);
        return campusRepository.findAll();
    }

    @PostMapping(path="/roster")
    public @ResponseBody String addRoster(@RequestParam String teacherName,@RequestParam String teacherLastName1,
    @RequestParam String teacherLastName2, @RequestParam Integer campusID, @RequestParam String subjectName) {
        teacherLastName2 = teacherLastName2 == null ? "" : teacherLastName2;
        Roster roster = new Roster();
        roster.setCampusID(campusID);
        roster.setTeacherName(teacherName);
        roster.setTeacherLastName1(teacherLastName1);
        roster.setTeacherLastName2(teacherLastName2);
        roster.setSubjectName(subjectName); 
        System.out.println("*********************");
        rosterRepository.save(roster);

        return "Saved";
    }

}